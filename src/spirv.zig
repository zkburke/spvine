pub const Air = @import("spirv/Air.zig");
pub const Iterator = @import("spirv/Iterator.zig");
pub const reflect = @import("spirv/reflect.zig");

///The size of a word in an opcode stream
pub const Word = enum(WordInt) { _ };
///The integer representation of a spirv word
pub const WordInt = u32;

pub const SourceLanguage = enum(u32) {
    unknown = 0,
    essl = 1,
    glsl = 2,
    opencl_c = 3,
    opencl_cpp = 4,
    hlsl = 5,
    cpp_for_opencl = 6,
    sycl = 7,
};

pub const ExecutionModel = enum(u32) {
    vertex = 0,
    tesselation_control = 1,
    tesselation_evaluation = 2,
    geometry = 3,
    fragment = 4,
    gl_compute = 5,
    kernel = 6,
    task_nv = 5267,
    mesh_nv = 5268,
    ray_generation_khr = 5313,
    intersection_khr = 5314,
    any_hit_khr = 5315,
    closest_hit_khr = 5316,
    miss_khr = 5317,
    callable_khr = 5318,
    task_ext = 5364,
    mesh_ext = 5365,
};

pub const AddressingMode = enum(u32) {
    logical = 0,
    physical_32 = 1,
    physical_64 = 2,
    physical_storage_buffer_64 = 5348,
};

pub const MemoryModel = enum(u32) {
    simple = 0,
    glsl450 = 1,
    opencl = 2,
    vulkan = 3,
};

pub const ExecutionMode = enum(u32) {
    invocations = 0,
    spacing_equal = 1,
    spacing_fractional_even = 2,
    spacing_fractional_odd = 3,
    vertex_order_cw = 4,
    vertex_order_ccw = 5,
    pixel_center_integer = 6,
    origin_upper_left = 7,
    origin_lower_left = 8,
    early_fragment_tests = 9,
    point_mode = 10,
    xfb = 11,
    depth_replacing = 12,
    depth_greater = 14,
    depth_less = 15,
    depth_unchanged = 16,
    local_size = 17,
    local_size_hint = 18,
    input_points = 19,
    input_lines = 20,
    input_lines_adjacency = 21,
    triangles = 22,
    input_triangles_adjacency = 23,
    quads = 24,
    isolines = 25,
    output_vertices = 26,
    output_points = 27,
    output_line_strip = 28,
    output_triangle_strip = 29,
    vec_type_hint = 30,
    contraction_off = 31,
    initializer = 33,
    finalizer = 34,
    subgroup_size = 35,
    subgroups_per_workgroup = 36,
    subgroups_per_workgroup_id = 37,
    local_size_id = 38,
    local_size_hint_id = 39,
    subgroup_uniform_control_flow_khr = 4421,
    post_depth_coverage = 4446,
    denorm_preserve = 4459,
    denorm_flush_to_zero = 4460,
    signed_zero_inf_nan_preserve = 4461,
    rounding_mode_rte = 4462,
    rounding_mode_rtz = 4463,
    early_and_late_fragment_tests_amd = 5017,
    stencil_ref_replacing_ext = 5027,
    stencil_ref_unchanged_front_amd = 5079,
    stencil_ref_greater_front_amd = 5080,
    stencil_ref_less_front_amd = 5081,
    stencil_ref_unchanged_back_amd = 5082,
    stencil_ref_greater_back_amd = 5083,
    stencil_ref_less_back_amd = 5084,
    output_lines_ext = 5269,
    output_primitivesext = 5270,
    derivative_group_quads_nv = 5289,
    derivative_group_linear_nv = 5290,
    output_triangles_ext = 5298,
    pixel_interlock_ordered_ext = 5366,
    pixel_interlock_unordered_ext = 5367,
    sample_interlock_ordered_ext = 5368,
    sample_interlock_unordered_ext = 5369,
    shading_rate_interlock_ordered_ext = 5370,
    shading_rate_interlock_unordered_ext = 5371,
    shared_local_memory_size_intel = 5618,
    rounding_mode_rtp_intel = 5620,
    rounding_mode_rtn_intel = 5621,
    floating_point_mode_alt_intel = 5622,
    floating_point_mode_ieee_intel = 5623,
    max_workgroup_size_intel = 5893,
    max_work_dim_intel = 5894,
    no_global_offset_intel = 5895,
    num_simd_workitems_intel = 5896,
    scheduler_target_fmax_mhz_intel = 5903,
    named_barrier_count_intel = 6417,
};

pub const StorageClass = enum(u32) {
    UniformConstant = 0,
    Input = 1,
    Uniform = 2,
    Output = 3,
    Workgroup = 4,
    CrossWorkgroup = 5,
    Private = 6,
    Function = 7,
    Generic = 8,
    PushConstant = 9,
    AtomicCounter = 10,
    Image = 11,
    StorageBuffer = 12,
    CallableDataKHR = 5328,
    IncomingCallableDataKHR = 5329,
    RayPayloadKHR = 5338,
    HitAttributeKHR = 5339,
    IncomingRayPayloadKHR = 5342,
    ShaderRecordBufferKHR = 5343,
    PhysicalStorageBuffer = 5349,
    TaskPayloadWorkgroupEXT = 5402,
    CodeSectionINTEL = 5605,
    DeviceOnlyINTEL = 5936,
    HostOnlyINTEL = 5937,
};

pub const Dim = enum(u32) {
    @"1D" = 0,
    @"2D" = 1,
    @"3D" = 2,
    Cube = 3,
    Rect = 4,
    Buffer = 5,
    SubpassData = 6,
};

pub const SamplerAddressingMode = enum(u32) {
    None = 0,
    ClampToEdge = 1,
    Clamp = 2,
    Repeat = 3,
    RepeatMirrored = 4,
};

pub const SamplerFilterMode = enum(u32) {
    Nearest = 0,
    Linear = 1,
};

pub const ImageFormat = enum(u32) {
    Unknown = 0,
    Rgba32f = 1,
    Rgba16f = 2,
    R32f = 3,
    Rgba8 = 4,
    Rgba8Snorm = 5,
    Rg32f = 6,
    Rg16f = 7,
    R11fG11fB10f = 8,
    R16f = 9,
    Rgba16 = 10,
    Rgb10A2 = 11,
    Rg16 = 12,
    Rg8 = 13,
    R16 = 14,
    R8 = 15,
    Rgba16Snorm = 16,
    Rg16Snorm = 17,
    Rg8Snorm = 18,
    R16Snorm = 19,
    R8Snorm = 20,
    Rgba32i = 21,
    Rgba16i = 22,
    Rgba8i = 23,
    R32i = 24,
    Rg32i = 25,
    Rg16i = 26,
    Rg8i = 27,
    R16i = 28,
    R8i = 29,
    Rgba32ui = 30,
    Rgba16ui = 31,
    Rgba8ui = 32,
    R32ui = 33,
    Rgb10a2ui = 34,
    Rg32ui = 35,
    Rg16ui = 36,
    Rg8ui = 37,
    R16ui = 38,
    R8ui = 39,
    R64ui = 40,
    R64i = 41,
};

pub const ImageChannelOrder = enum(u32) {
    R = 0,
    A = 1,
    RG = 2,
    RA = 3,
    RGB = 4,
    RGBA = 5,
    BGRA = 6,
    ARGB = 7,
    Intensity = 8,
    Luminance = 9,
    Rx = 10,
    RGx = 11,
    RGBx = 12,
    Depth = 13,
    DepthStencil = 14,
    sRGB = 15,
    sRGBx = 16,
    sRGBA = 17,
    sBGRA = 18,
    ABGR = 19,
};

pub const ImageChannelDataType = enum(u32) {
    SnormInt8 = 0,
    SnormInt16 = 1,
    UnormInt8 = 2,
    UnormInt16 = 3,
    UnormShort565 = 4,
    UnormShort555 = 5,
    UnormInt101010 = 6,
    SignedInt8 = 7,
    SignedInt16 = 8,
    SignedInt32 = 9,
    UnsignedInt8 = 10,
    UnsignedInt16 = 11,
    UnsignedInt32 = 12,
    HalfFloat = 13,
    Float = 14,
    UnormInt24 = 15,
    UnormInt101010_2 = 16,
};

pub const ImageOperands = packed struct(u32) {
    Bias: bool = false,
    Lod: bool = false,
    Grad: bool = false,
    ConstOffset: bool = false,
    Offset: bool = false,
    ConstOffsets: bool = false,
    Sample: bool = false,
    MinLod: bool = false,
    MakeTexelAvailable: bool = false,
    MakeTexelVisible: bool = false,
    NonPrivateTexel: bool = false,
    VolatileTexel: bool = false,
    SignExtend: bool = false,
    ZeroExtend: bool = false,
    Nontemporal: bool = false,
    _padding_0: u1 = 0,
    OffsetsMask: bool = false,
    _padding_1: u15 = 0,
};

pub const FPFastMathMode = packed struct(u32) {
    NotNaN: bool = false,
    NotInf: bool = false,
    NSZ: bool = false,
    AllowRecip: bool = false,
    Fast: bool = false,
    _padding_0: u11 = 0,
    AllowContractFastINTEL: bool = false,
    AllowReassocINTEL: bool = false,
    _padding_1: u14 = 0,
};

pub const FPRoundingMode = enum(u32) {};

pub const LinkageType = enum(u32) {};

pub const AccessQualifier = enum(u32) {};

pub const FunctionParameterAttribute = enum(u32) {};

pub const Decoration = enum(u32) {
    RelaxedPrecision = 0,
    SpecId = 1,
    Block = 2,
    BufferBlock = 3,
    RowMajor = 4,
    ColMajor = 5,
    ArrayStride = 6,
    MatrixStride = 7,
    GLSLShared = 8,
    GLSLPacked = 9,
    CPacked = 10,
    BuiltIn = 11,
    NoPerspective = 13,
    Flat = 14,
    Patch = 15,
    Centroid = 16,
    Sample = 17,
    Invariant = 18,
    Restrict = 19,
    Aliased = 20,
    Volatile = 21,
    Constant = 22,
    Coherent = 23,
    NonWritable = 24,
    NonReadable = 25,
    Uniform = 26,
    UniformId = 27,
    SaturatedConversion = 28,
    Stream = 29,
    Location = 30,
    Component = 31,
    Index = 32,
    Binding = 33,
    DescriptorSet = 34,
    Offset = 35,
    XfbBuffer = 36,
    XfbStride = 37,
    FuncParamAttr = 38,
    FPRoundingMode = 39,
    FPFastMathMode = 40,
    LinkageAttributes = 41,
    NoContraction = 42,
    InputAttachmentIndex = 43,
    Alignment = 44,
    MaxByteOffset = 45,
    AlignmentId = 46,
    MaxByteOffsetId = 47,
    NoSignedWrap = 4469,
    NoUnsignedWrap = 4470,
    ExplicitInterpAMD = 4999,
    OverrideCoverageNV = 5248,
    PassthroughNV = 5250,
    ViewportRelativeNV = 5252,
    SecondaryViewportRelativeNV = 5256,
    PerPrimitiveEXT = 5271,
    PerViewNV = 5272,
    PerTaskNV = 5273,
    PerVertexKHR = 5285,
    NonUniform = 5300,
    RestrictPointer = 5355,
    AliasedPointer = 5356,
    BindlessSamplerNV = 5398,
    BindlessImageNV = 5399,
    BoundSamplerNV = 5400,
    BoundImageNV = 5401,
    SIMTCallINTEL = 5599,
    ReferencedIndirectlyINTEL = 5602,
    ClobberINTEL = 5607,
    SideEffectsINTEL = 5608,
    VectorComputeVariableINTEL = 5624,
    FuncParamIOKindINTEL = 5625,
    VectorComputeFunctionINTEL = 5626,
    StackCallINTEL = 5627,
    GlobalVariableOffsetINTEL = 5628,
    CounterBuffer = 5634,
    UserSemantic = 5635,
    UserTypeGOOGLE = 5636,
    FunctionRoundingModeINTEL = 5822,
    FunctionDenormModeINTEL = 5823,
    RegisterINTEL = 5825,
    MemoryINTEL = 5826,
    NumbanksINTEL = 5827,
    BankwidthINTEL = 5828,
    MaxPrivateCopiesINTEL = 5829,
    SinglepumpINTEL = 5830,
    DoublepumpINTEL = 5831,
    MaxReplicatesINTEL = 5832,
    SimpleDualPortINTEL = 5833,
    MergeINTEL = 5834,
    BankBitsINTEL = 5835,
    ForcePow2DepthINTEL = 5836,
    BurstCoalesceINTEL = 5899,
    CacheSizeINTEL = 5900,
    DontStaticallyCoalesceINTEL = 5901,
    PrefetchINTEL = 5902,
    StallEnableINTEL = 5905,
    FuseLoopsInFunctionINTEL = 5907,
    AliasScopeINTEL = 5914,
    NoAliasINTEL = 5915,
    BufferLocationINTEL = 5921,
    IOPipeStorageINTEL = 5944,
    FunctionFloatingPointModeINTEL = 6080,
    SingleElementVectorINTEL = 6085,
    VectorComputeCallableFunctionINTEL = 6087,
    MediaBlockIOINTEL = 6140,
};

pub const BuiltIn = enum(u32) {};

pub const SelectionControl = packed struct(u32) {
    Flatten: bool = false,
    DontFlatten: bool = false,
    _padding_0: u30 = 0,
};

pub const LoopControl = packed struct(u32) {
    Unroll: bool = false,
    DontUnroll: bool = false,
    DependencyInfinite: bool = false,
    DependencyLength: bool = false,
    MinIterations: bool = false,
    MaxIterations: bool = false,
    IterationMultiple: bool = false,
    PeelCount: bool = false,
    PartialCount: bool = false,
    _padding_0: u8 = 0,
    InitiationIntervalINTEL: bool = false,
    MaxConcurrencyINTEL: bool = false,
    DependencyArrayINTEL: bool = false,
    PipelineEnableINTEL: bool = false,
    LoopCoalesceINTEL: bool = false,
    MaxInterleavingINTEL: bool = false,
    SpeculatedIterationsINTEL: bool = false,
    NoFusionINTEL: bool = false,
    _padding_1: u7 = 0,
};

pub const FunctionControl = packed struct(u32) {
    Inline: bool = false,
    DontInline: bool = false,
    Pure: bool = false,
    Const: bool = false,
    _padding_0: u12 = 0,
    OptNoneINTEL: bool = false,
    _padding_1: u15 = 0,
};

pub const MemorySemantics = packed struct(u32) {
    _padding_0: u1 = 0,
    Acquire: bool = false,
    Release: bool = false,
    AcquireRelease: bool = false,
    SequentiallyConsistent: bool = false,
    UniformMemory: bool = false,
    SubgroupMemory: bool = false,
    WorkgroupMemory: bool = false,
    CrossWorkgroupMemory: bool = false,
    AtomicCounterMemory: bool = false,
    ImageMemory: bool = false,
    OutputMemory: bool = false,
    MakeAvailable: bool = false,
    MakeVisible: bool = false,
    Volatile: bool = false,
    _padding_1: u17 = 0,
};

pub const MemoryAccess = packed struct(u32) {
    Volatile: bool = false,
    Aligned: bool = false,
    Nontemporal: bool = false,
    MakePointerAvailable: bool = false,
    MakePointerVisible: bool = false,
    NonPrivatePointer: bool = false,
    _padding_0: u11 = 0,
    AliasScopeINTELMask: bool = false,
    NoAliasINTELMask: bool = false,
    _padding_1: u14 = 0,
};

pub const Scope = enum(u32) {
    CrossDevice = 0,
    Device = 1,
    Workgroup = 2,
    Subgroup = 3,
    Invocation = 4,
    QueueFamily = 5,
    ShaderCallKHR = 6,
};

pub const GroupOperation = enum(u32) {
    Reduce = 0,
    InclusiveScan = 1,
    ExclusiveScan = 2,
    ClusteredReduce = 3,
    PartitionedReduceNV = 6,
    PartitionedInclusiveScanNV = 7,
    PartitionedExclusiveScanNV = 8,
};

pub const KernelEnqueueFlags = enum(u32) {
    NoWait = 0,
    WaitKernel = 1,
    WaitWorkGroup = 2,
};

pub const KernelProfilingInfo = packed struct(u32) {
    CmdExecTimeMask: bool = false,
    _padding_0: u31 = 0,
};

pub const Capability = enum(u32) {
    Matrix = 0,
    Shader = 1,
    Geometry = 2,
    Tessellation = 3,
    Addresses = 4,
    Linkage = 5,
    Kernel = 6,
    Vector16 = 7,
    Float16Buffer = 8,
    Float16 = 9,
    Float64 = 10,
    Int64 = 11,
    Int64Atomics = 12,
    ImageBasic = 13,
    ImageReadWrite = 14,
    ImageMipmap = 15,
    Pipes = 17,
    Groups = 18,
    DeviceEnqueue = 19,
    LiteralSampler = 20,
    AtomicStorage = 21,
    Int16 = 22,
    TessellationPointSize = 23,
    GeometryPointSize = 24,
    ImageGatherExtended = 25,
    StorageImageMultisample = 27,
    UniformBufferArrayDynamicIndexing = 28,
    SampledImageArrayDynamicIndexing = 29,
    StorageBufferArrayDynamicIndexing = 30,
    StorageImageArrayDynamicIndexing = 31,
    ClipDistance = 32,
    CullDistance = 33,
    ImageCubeArray = 34,
    SampleRateShading = 35,
    ImageRect = 36,
    SampledRect = 37,
    GenericPointer = 38,
    Int8 = 39,
    InputAttachment = 40,
    SparseResidency = 41,
    MinLod = 42,
    Sampled1D = 43,
    Image1D = 44,
    SampledCubeArray = 45,
    SampledBuffer = 46,
    ImageBuffer = 47,
    ImageMSArray = 48,
    StorageImageExtendedFormats = 49,
    ImageQuery = 50,
    DerivativeControl = 51,
    InterpolationFunction = 52,
    TransformFeedback = 53,
    GeometryStreams = 54,
    StorageImageReadWithoutFormat = 55,
    StorageImageWriteWithoutFormat = 56,
    MultiViewport = 57,
    SubgroupDispatch = 58,
    NamedBarrier = 59,
    PipeStorage = 60,
    GroupNonUniform = 61,
    GroupNonUniformVote = 62,
    GroupNonUniformArithmetic = 63,
    GroupNonUniformBallot = 64,
    GroupNonUniformShuffle = 65,
    GroupNonUniformShuffleRelative = 66,
    GroupNonUniformClustered = 67,
    GroupNonUniformQuad = 68,
    ShaderLayer = 69,
    ShaderViewportIndex = 70,
    UniformDecoration = 71,
    CoreBuiltinsARM = 4165,
    FragmentShadingRateKHR = 4422,
    SubgroupBallotKHR = 4423,
    DrawParameters = 4427,
    WorkgroupMemoryExplicitLayoutKHR = 4428,
    WorkgroupMemoryExplicitLayout8BitAccessKHR = 4429,
    WorkgroupMemoryExplicitLayout16BitAccessKHR = 4430,
    SubgroupVoteKHR = 4431,
    StorageBuffer16BitAccess = 4433,
    UniformAndStorageBuffer16BitAccess = 4434,
    StoragePushConstant16 = 4435,
    StorageInputOutput16 = 4436,
    DeviceGroup = 4437,
    MultiView = 4439,
    VariablePointersStorageBuffer = 4441,
    VariablePointers = 4442,
    AtomicStorageOps = 4445,
    SampleMaskPostDepthCoverage = 4447,
    StorageBuffer8BitAccess = 4448,
    UniformAndStorageBuffer8BitAccess = 4449,
    StoragePushConstant8 = 4450,
    DenormPreserve = 4464,
    DenormFlushToZero = 4465,
    SignedZeroInfNanPreserve = 4466,
    RoundingModeRTE = 4467,
    RoundingModeRTZ = 4468,
    RayQueryProvisionalKHR = 4471,
    RayQueryKHR = 4472,
    RayTraversalPrimitiveCullingKHR = 4478,
    RayTracingKHR = 4479,
    Float16ImageAMD = 5008,
    ImageGatherBiasLodAMD = 5009,
    FragmentMaskAMD = 5010,
    StencilExportEXT = 5013,
    ImageReadWriteLodAMD = 5015,
    Int64ImageEXT = 5016,
    ShaderClockKHR = 5055,
    SampleMaskOverrideCoverageNV = 5249,
    GeometryShaderPassthroughNV = 5251,
    ShaderViewportIndexLayerEXT = 5254,
    ShaderViewportMaskNV = 5255,
    ShaderStereoViewNV = 5259,
    PerViewAttributesNV = 5260,
    FragmentFullyCoveredEXT = 5265,
    MeshShadingNV = 5266,
    ImageFootprintNV = 5282,
    MeshShadingEXT = 5283,
    FragmentBarycentricKHR = 5284,
    ComputeDerivativeGroupQuadsNV = 5288,
    FragmentDensityEXT = 5291,
    GroupNonUniformPartitionedNV = 5297,
    ShaderNonUniform = 5301,
    RuntimeDescriptorArray = 5302,
    InputAttachmentArrayDynamicIndexing = 5303,
    UniformTexelBufferArrayDynamicIndexing = 5304,
    StorageTexelBufferArrayDynamicIndexing = 5305,
    UniformBufferArrayNonUniformIndexing = 5306,
    SampledImageArrayNonUniformIndexing = 5307,
    StorageBufferArrayNonUniformIndexing = 5308,
    StorageImageArrayNonUniformIndexing = 5309,
    InputAttachmentArrayNonUniformIndexing = 5310,
    UniformTexelBufferArrayNonUniformIndexing = 5311,
    StorageTexelBufferArrayNonUniformIndexing = 5312,
    RayTracingNV = 5340,
    RayTracingMotionBlurNV = 5341,
    VulkanMemoryModel = 5345,
    VulkanMemoryModelDeviceScope = 5346,
    PhysicalStorageBufferAddresses = 5347,
    ComputeDerivativeGroupLinearNV = 5350,
    RayTracingProvisionalKHR = 5353,
    CooperativeMatrixNV = 5357,
    FragmentShaderSampleInterlockEXT = 5363,
    FragmentShaderShadingRateInterlockEXT = 5372,
    ShaderSMBuiltinsNV = 5373,
    FragmentShaderPixelInterlockEXT = 5378,
    DemoteToHelperInvocation = 5379,
    RayTracingOpacityMicromapEXT = 5381,
    BindlessTextureNV = 5390,
    SubgroupShuffleINTEL = 5568,
    SubgroupBufferBlockIOINTEL = 5569,
    SubgroupImageBlockIOINTEL = 5570,
    SubgroupImageMediaBlockIOINTEL = 5579,
    RoundToInfinityINTEL = 5582,
    FloatingPointModeINTEL = 5583,
    IntegerFunctions2INTEL = 5584,
    FunctionPointersINTEL = 5603,
    IndirectReferencesINTEL = 5604,
    AsmINTEL = 5606,
    AtomicFloat32MinMaxEXT = 5612,
    AtomicFloat64MinMaxEXT = 5613,
    AtomicFloat16MinMaxEXT = 5616,
    VectorComputeINTEL = 5617,
    VectorAnyINTEL = 5619,
    ExpectAssumeKHR = 5629,
    SubgroupAvcMotionEstimationINTEL = 5696,
    SubgroupAvcMotionEstimationIntraINTEL = 5697,
    SubgroupAvcMotionEstimationChromaINTEL = 5698,
    VariableLengthArrayINTEL = 5817,
    FunctionFloatControlINTEL = 5821,
    FPGAMemoryAttributesINTEL = 5824,
    FPFastMathModeINTEL = 5837,
    ArbitraryPrecisionIntegersINTEL = 5844,
    ArbitraryPrecisionFloatingPointINTEL = 5845,
    UnstructuredLoopControlsINTEL = 5886,
    FPGALoopControlsINTEL = 5888,
    KernelAttributesINTEL = 5892,
    FPGAKernelAttributesINTEL = 5897,
    FPGAMemoryAccessesINTEL = 5898,
    FPGAClusterAttributesINTEL = 5904,
    LoopFuseINTEL = 5906,
    MemoryAccessAliasingINTEL = 5910,
    FPGABufferLocationINTEL = 5920,
    ArbitraryPrecisionFixedPointINTEL = 5922,
    USMStorageClassesINTEL = 5935,
    IOPipesINTEL = 5943,
    BlockingPipesINTEL = 5945,
    FPGARegINTEL = 5948,
    DotProductInputAll = 6016,
    DotProductInput4x8Bit = 6017,
    DotProductInput4x8BitPacked = 6018,
    DotProduct = 6019,
    RayCullMaskKHR = 6020,
    BitInstructions = 6025,
    GroupNonUniformRotateKHR = 6026,
    AtomicFloat32AddEXT = 6033,
    AtomicFloat64AddEXT = 6034,
    LongConstantCompositeINTEL = 6089,
    OptNoneINTEL = 6094,
    AtomicFloat16AddEXT = 6095,
    DebugInfoModuleINTEL = 6114,
    SplitBarrierINTEL = 6141,
    GroupUniformArithmeticKHR = 6400,
};

pub const RayFlags = packed struct(u32) {
    OpaqueKHRShift: bool = false,
    NoOpaqueKHRShift: bool = false,
    TerminateOnFirstHitKHRShift: bool = false,
    SkipClosestHitShaderKHRShift: bool = false,
    CullBackFacingTrianglesKHRShift: bool = false,
    CullFrontFacingTrianglesKHRShift: bool = false,
    CullOpaqueKHRShift: bool = false,
    CullNoOpaqueKHRShift: bool = false,
    SkipTrianglesKHRShift: bool = false,
    SkipAABBsKHRShift: bool = false,
    ForceOpacityMicromap2StateEXTShift: bool = false,
    _padding_0: u21 = 0,
};

pub const RayQueryIntersection = enum(u32) {};

pub const RayQueryCommittedIntersectionType = enum(u32) {};

pub const RayQueryCandidateIntersectionType = enum(u32) {};

pub const FragmentShadingRate = enum(u32) {};

pub const FPDenormMode = enum(u32) {};

pub const FPOperationMode = enum(u32) {};

pub const QuantizationModes = enum(u32) {};

pub const OverflowModes = enum(u32) {};

pub const PackedVectorFormat = enum(u32) {};

pub const Op = enum(u32) {
    Nop = 0,
    Undef = 1,
    SourceContinued = 2,
    Source = 3,
    SourceExtension = 4,
    Name = 5,
    MemberName = 6,
    String = 7,
    Line = 8,
    Extension = 10,
    ExtInstImport = 11,
    ExtInst = 12,
    MemoryModel = 14,
    EntryPoint = 15,
    ExecutionMode = 16,
    Capability = 17,
    TypeVoid = 19,
    TypeBool = 20,
    TypeInt = 21,
    TypeFloat = 22,
    TypeVector = 23,
    TypeMatrix = 24,
    TypeImage = 25,
    TypeSampler = 26,
    TypeSampledImage = 27,
    TypeArray = 28,
    TypeRuntimeArray = 29,
    TypeStruct = 30,
    TypeOpaque = 31,
    TypePointer = 32,
    TypeFunction = 33,
    TypeEvent = 34,
    TypeDeviceEvent = 35,
    TypeReserveId = 36,
    TypeQueue = 37,
    TypePipe = 38,
    TypeForwardPointer = 39,
    ConstantTrue = 41,
    ConstantFalse = 42,
    Constant = 43,
    ConstantComposite = 44,
    ConstantSampler = 45,
    ConstantNull = 46,
    SpecConstantTrue = 48,
    SpecConstantFalse = 49,
    SpecConstant = 50,
    SpecConstantComposite = 51,
    SpecConstantOp = 52,
    Function = 54,
    FunctionParameter = 55,
    FunctionEnd = 56,
    FunctionCall = 57,
    Variable = 59,
    ImageTexelPointer = 60,
    Load = 61,
    Store = 62,
    CopyMemory = 63,
    CopyMemorySized = 64,
    AccessChain = 65,
    InBoundsAccessChain = 66,
    PtrAccessChain = 67,
    ArrayLength = 68,
    GenericPtrMemSemantics = 69,
    InBoundsPtrAccessChain = 70,
    Decorate = 71,
    MemberDecorate = 72,
    DecorationGroup = 73,
    GroupDecorate = 74,
    GroupMemberDecorate = 75,
    VectorExtractDynamic = 77,
    VectorInsertDynamic = 78,
    VectorShuffle = 79,
    CompositeConstruct = 80,
    CompositeExtract = 81,
    CompositeInsert = 82,
    CopyObject = 83,
    Transpose = 84,
    SampledImage = 86,
    ImageSampleImplicitLod = 87,
    ImageSampleExplicitLod = 88,
    ImageSampleDrefImplicitLod = 89,
    ImageSampleDrefExplicitLod = 90,
    ImageSampleProjImplicitLod = 91,
    ImageSampleProjExplicitLod = 92,
    ImageSampleProjDrefImplicitLod = 93,
    ImageSampleProjDrefExplicitLod = 94,
    ImageFetch = 95,
    ImageGather = 96,
    ImageDrefGather = 97,
    ImageRead = 98,
    ImageWrite = 99,
    Image = 100,
    ImageQueryFormat = 101,
    ImageQueryOrder = 102,
    ImageQuerySizeLod = 103,
    ImageQuerySize = 104,
    ImageQueryLod = 105,
    ImageQueryLevels = 106,
    ImageQuerySamples = 107,
    ConvertFToU = 109,
    ConvertFToS = 110,
    ConvertSToF = 111,
    ConvertUToF = 112,
    UConvert = 113,
    SConvert = 114,
    FConvert = 115,
    QuantizeToF16 = 116,
    ConvertPtrToU = 117,
    SatConvertSToU = 118,
    SatConvertUToS = 119,
    ConvertUToPtr = 120,
    PtrCastToGeneric = 121,
    GenericCastToPtr = 122,
    GenericCastToPtrExplicit = 123,
    Bitcast = 124,
    SNegate = 126,
    FNegate = 127,
    IAdd = 128,
    FAdd = 129,
    ISub = 130,
    FSub = 131,
    IMul = 132,
    FMul = 133,
    UDiv = 134,
    SDiv = 135,
    FDiv = 136,
    UMod = 137,
    SRem = 138,
    SMod = 139,
    FRem = 140,
    FMod = 141,
    VectorTimesScalar = 142,
    MatrixTimesScalar = 143,
    VectorTimesMatrix = 144,
    MatrixTimesVector = 145,
    MatrixTimesMatrix = 146,
    OuterProduct = 147,
    Dot = 148,
    IAddCarry = 149,
    ISubBorrow = 150,
    UMulExtended = 151,
    SMulExtended = 152,
    Any = 154,
    All = 155,
    IsNan = 156,
    IsInf = 157,
    IsFinite = 158,
    IsNormal = 159,
    SignBitSet = 160,
    LessOrGreater = 161,
    Ordered = 162,
    Unordered = 163,
    LogicalEqual = 164,
    LogicalNotEqual = 165,
    LogicalOr = 166,
    LogicalAnd = 167,
    LogicalNot = 168,
    Select = 169,
    IEqual = 170,
    INotEqual = 171,
    UGreaterThan = 172,
    SGreaterThan = 173,
    UGreaterThanEqual = 174,
    SGreaterThanEqual = 175,
    ULessThan = 176,
    SLessThan = 177,
    ULessThanEqual = 178,
    SLessThanEqual = 179,
    FOrdEqual = 180,
    FUnordEqual = 181,
    FOrdNotEqual = 182,
    FUnordNotEqual = 183,
    FOrdLessThan = 184,
    FUnordLessThan = 185,
    FOrdGreaterThan = 186,
    FUnordGreaterThan = 187,
    FOrdLessThanEqual = 188,
    FUnordLessThanEqual = 189,
    FOrdGreaterThanEqual = 190,
    FUnordGreaterThanEqual = 191,
    ShiftRightLogical = 194,
    ShiftRightArithmetic = 195,
    ShiftLeftLogical = 196,
    BitwiseOr = 197,
    BitwiseXor = 198,
    BitwiseAnd = 199,
    Not = 200,
    BitFieldInsert = 201,
    BitFieldSExtract = 202,
    BitFieldUExtract = 203,
    BitReverse = 204,
    BitCount = 205,
    DPdx = 207,
    DPdy = 208,
    Fwidth = 209,
    DPdxFine = 210,
    DPdyFine = 211,
    FwidthFine = 212,
    DPdxCoarse = 213,
    DPdyCoarse = 214,
    FwidthCoarse = 215,
    EmitVertex = 218,
    EndPrimitive = 219,
    EmitStreamVertex = 220,
    EndStreamPrimitive = 221,
    ControlBarrier = 224,
    MemoryBarrier = 225,
    AtomicLoad = 227,
    AtomicStore = 228,
    AtomicExchange = 229,
    AtomicCompareExchange = 230,
    AtomicCompareExchangeWeak = 231,
    AtomicIIncrement = 232,
    AtomicIDecrement = 233,
    AtomicIAdd = 234,
    AtomicISub = 235,
    AtomicSMin = 236,
    AtomicUMin = 237,
    AtomicSMax = 238,
    AtomicUMax = 239,
    AtomicAnd = 240,
    AtomicOr = 241,
    AtomicXor = 242,
    Phi = 245,
    LoopMerge = 246,
    SelectionMerge = 247,
    Label = 248,
    Branch = 249,
    BranchConditional = 250,
    Switch = 251,
    Kill = 252,
    Return = 253,
    ReturnValue = 254,
    Unreachable = 255,
    LifetimeStart = 256,
    LifetimeStop = 257,
    GroupAsyncCopy = 259,
    GroupWaitEvents = 260,
    GroupAll = 261,
    GroupAny = 262,
    GroupBroadcast = 263,
    GroupIAdd = 264,
    GroupFAdd = 265,
    GroupFMin = 266,
    GroupUMin = 267,
    GroupSMin = 268,
    GroupFMax = 269,
    GroupUMax = 270,
    GroupSMax = 271,
    ReadPipe = 274,
    WritePipe = 275,
    ReservedReadPipe = 276,
    ReservedWritePipe = 277,
    ReserveReadPipePackets = 278,
    ReserveWritePipePackets = 279,
    CommitReadPipe = 280,
    CommitWritePipe = 281,
    IsValidReserveId = 282,
    GetNumPipePackets = 283,
    GetMaxPipePackets = 284,
    GroupReserveReadPipePackets = 285,
    GroupReserveWritePipePackets = 286,
    GroupCommitReadPipe = 287,
    GroupCommitWritePipe = 288,
    EnqueueMarker = 291,
    EnqueueKernel = 292,
    GetKernelNDrangeSubGroupCount = 293,
    GetKernelNDrangeMaxSubGroupSize = 294,
    GetKernelWorkGroupSize = 295,
    GetKernelPreferredWorkGroupSizeMultiple = 296,
    RetainEvent = 297,
    ReleaseEvent = 298,
    CreateUserEvent = 299,
    IsValidEvent = 300,
    SetUserEventStatus = 301,
    CaptureEventProfilingInfo = 302,
    GetDefaultQueue = 303,
    BuildNDRange = 304,
    ImageSparseSampleImplicitLod = 305,
    ImageSparseSampleExplicitLod = 306,
    ImageSparseSampleDrefImplicitLod = 307,
    ImageSparseSampleDrefExplicitLod = 308,
    ImageSparseSampleProjImplicitLod = 309,
    ImageSparseSampleProjExplicitLod = 310,
    ImageSparseSampleProjDrefImplicitLod = 311,
    ImageSparseSampleProjDrefExplicitLod = 312,
    ImageSparseFetch = 313,
    ImageSparseGather = 314,
    ImageSparseDrefGather = 315,
    ImageSparseTexelsResident = 316,
    NoLine = 317,
    AtomicFlagTestAndSet = 318,
    AtomicFlagClear = 319,
    ImageSparseRead = 320,
    SizeOf = 321,
    TypePipeStorage = 322,
    ConstantPipeStorage = 323,
    CreatePipeFromPipeStorage = 324,
    GetKernelLocalSizeForSubgroupCount = 325,
    GetKernelMaxNumSubgroups = 326,
    TypeNamedBarrier = 327,
    NamedBarrierInitialize = 328,
    MemoryNamedBarrier = 329,
    ModuleProcessed = 330,
    ExecutionModeId = 331,
    DecorateId = 332,
    GroupNonUniformElect = 333,
    GroupNonUniformAll = 334,
    GroupNonUniformAny = 335,
    GroupNonUniformAllEqual = 336,
    GroupNonUniformBroadcast = 337,
    GroupNonUniformBroadcastFirst = 338,
    GroupNonUniformBallot = 339,
    GroupNonUniformInverseBallot = 340,
    GroupNonUniformBallotBitExtract = 341,
    GroupNonUniformBallotBitCount = 342,
    GroupNonUniformBallotFindLSB = 343,
    GroupNonUniformBallotFindMSB = 344,
    GroupNonUniformShuffle = 345,
    GroupNonUniformShuffleXor = 346,
    GroupNonUniformShuffleUp = 347,
    GroupNonUniformShuffleDown = 348,
    GroupNonUniformIAdd = 349,
    GroupNonUniformFAdd = 350,
    GroupNonUniformIMul = 351,
    GroupNonUniformFMul = 352,
    GroupNonUniformSMin = 353,
    GroupNonUniformUMin = 354,
    GroupNonUniformFMin = 355,
    GroupNonUniformSMax = 356,
    GroupNonUniformUMax = 357,
    GroupNonUniformFMax = 358,
    GroupNonUniformBitwiseAnd = 359,
    GroupNonUniformBitwiseOr = 360,
    GroupNonUniformBitwiseXor = 361,
    GroupNonUniformLogicalAnd = 362,
    GroupNonUniformLogicalOr = 363,
    GroupNonUniformLogicalXor = 364,
    GroupNonUniformQuadBroadcast = 365,
    GroupNonUniformQuadSwap = 366,
    CopyLogical = 400,
    PtrEqual = 401,
    PtrNotEqual = 402,
    PtrDiff = 403,
    TerminateInvocation = 4416,
    SubgroupBallotKHR = 4421,
    SubgroupFirstInvocationKHR = 4422,
    SubgroupAllKHR = 4428,
    SubgroupAnyKHR = 4429,
    SubgroupAllEqualKHR = 4430,
    GroupNonUniformRotateKHR = 4431,
    SubgroupReadInvocationKHR = 4432,
    TraceRayKHR = 4445,
    ExecuteCallableKHR = 4446,
    ConvertUToAccelerationStructureKHR = 4447,
    IgnoreIntersectionKHR = 4448,
    TerminateRayKHR = 4449,
    SDot = 4450,
    UDot = 4451,
    SUDot = 4452,
    SDotAccSat = 4453,
    UDotAccSat = 4454,
    SUDotAccSat = 4455,
    TypeRayQueryKHR = 4472,
    RayQueryInitializeKHR = 4473,
    RayQueryTerminateKHR = 4474,
    RayQueryGenerateIntersectionKHR = 4475,
    RayQueryConfirmIntersectionKHR = 4476,
    RayQueryProceedKHR = 4477,
    RayQueryGetIntersectionTypeKHR = 4479,
    GroupIAddNonUniformAMD = 5000,
    GroupFAddNonUniformAMD = 5001,
    GroupFMinNonUniformAMD = 5002,
    GroupUMinNonUniformAMD = 5003,
    GroupSMinNonUniformAMD = 5004,
    GroupFMaxNonUniformAMD = 5005,
    GroupUMaxNonUniformAMD = 5006,
    GroupSMaxNonUniformAMD = 5007,
    FragmentMaskFetchAMD = 5011,
    FragmentFetchAMD = 5012,
    ReadClockKHR = 5056,
    ImageSampleFootprintNV = 5283,
    EmitMeshTasksEXT = 5294,
    SetMeshOutputsEXT = 5295,
    GroupNonUniformPartitionNV = 5296,
    WritePackedPrimitiveIndices4x8NV = 5299,
    ReportIntersectionKHR = 5334,
    IgnoreIntersectionNV = 5335,
    TerminateRayNV = 5336,
    TraceNV = 5337,
    TraceMotionNV = 5338,
    TraceRayMotionNV = 5339,
    TypeAccelerationStructureKHR = 5341,
    ExecuteCallableNV = 5344,
    TypeCooperativeMatrixNV = 5358,
    CooperativeMatrixLoadNV = 5359,
    CooperativeMatrixStoreNV = 5360,
    CooperativeMatrixMulAddNV = 5361,
    CooperativeMatrixLengthNV = 5362,
    BeginInvocationInterlockEXT = 5364,
    EndInvocationInterlockEXT = 5365,
    DemoteToHelperInvocation = 5380,
    IsHelperInvocationEXT = 5381,
    ConvertUToImageNV = 5391,
    ConvertUToSamplerNV = 5392,
    ConvertImageToUNV = 5393,
    ConvertSamplerToUNV = 5394,
    ConvertUToSampledImageNV = 5395,
    ConvertSampledImageToUNV = 5396,
    SamplerImageAddressingModeNV = 5397,
    SubgroupShuffleINTEL = 5571,
    SubgroupShuffleDownINTEL = 5572,
    SubgroupShuffleUpINTEL = 5573,
    SubgroupShuffleXorINTEL = 5574,
    SubgroupBlockReadINTEL = 5575,
    SubgroupBlockWriteINTEL = 5576,
    SubgroupImageBlockReadINTEL = 5577,
    SubgroupImageBlockWriteINTEL = 5578,
    SubgroupImageMediaBlockReadINTEL = 5580,
    SubgroupImageMediaBlockWriteINTEL = 5581,
    UCountLeadingZerosINTEL = 5585,
    UCountTrailingZerosINTEL = 5586,
    AbsISubINTEL = 5587,
    AbsUSubINTEL = 5588,
    IAddSatINTEL = 5589,
    UAddSatINTEL = 5590,
    IAverageINTEL = 5591,
    UAverageINTEL = 5592,
    IAverageRoundedINTEL = 5593,
    UAverageRoundedINTEL = 5594,
    ISubSatINTEL = 5595,
    USubSatINTEL = 5596,
    IMul32x16INTEL = 5597,
    UMul32x16INTEL = 5598,
    ConstantFunctionPointerINTEL = 5600,
    FunctionPointerCallINTEL = 5601,
    AsmTargetINTEL = 5609,
    AsmINTEL = 5610,
    AsmCallINTEL = 5611,
    AtomicFMinEXT = 5614,
    AtomicFMaxEXT = 5615,
    AssumeTrueKHR = 5630,
    ExpectKHR = 5631,
    DecorateString = 5632,
    MemberDecorateString = 5633,
    VmeImageINTEL = 5699,
    TypeVmeImageINTEL = 5700,
    TypeAvcImePayloadINTEL = 5701,
    TypeAvcRefPayloadINTEL = 5702,
    TypeAvcSicPayloadINTEL = 5703,
    TypeAvcMcePayloadINTEL = 5704,
    TypeAvcMceResultINTEL = 5705,
    TypeAvcImeResultINTEL = 5706,
    TypeAvcImeResultSingleReferenceStreamoutINTEL = 5707,
    TypeAvcImeResultDualReferenceStreamoutINTEL = 5708,
    TypeAvcImeSingleReferenceStreaminINTEL = 5709,
    TypeAvcImeDualReferenceStreaminINTEL = 5710,
    TypeAvcRefResultINTEL = 5711,
    TypeAvcSicResultINTEL = 5712,
    SubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713,
    SubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714,
    SubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715,
    SubgroupAvcMceSetInterShapePenaltyINTEL = 5716,
    SubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717,
    SubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718,
    SubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719,
    SubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720,
    SubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721,
    SubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722,
    SubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723,
    SubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724,
    SubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725,
    SubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726,
    SubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727,
    SubgroupAvcMceSetAcOnlyHaarINTEL = 5728,
    SubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729,
    SubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730,
    SubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731,
    SubgroupAvcMceConvertToImePayloadINTEL = 5732,
    SubgroupAvcMceConvertToImeResultINTEL = 5733,
    SubgroupAvcMceConvertToRefPayloadINTEL = 5734,
    SubgroupAvcMceConvertToRefResultINTEL = 5735,
    SubgroupAvcMceConvertToSicPayloadINTEL = 5736,
    SubgroupAvcMceConvertToSicResultINTEL = 5737,
    SubgroupAvcMceGetMotionVectorsINTEL = 5738,
    SubgroupAvcMceGetInterDistortionsINTEL = 5739,
    SubgroupAvcMceGetBestInterDistortionsINTEL = 5740,
    SubgroupAvcMceGetInterMajorShapeINTEL = 5741,
    SubgroupAvcMceGetInterMinorShapeINTEL = 5742,
    SubgroupAvcMceGetInterDirectionsINTEL = 5743,
    SubgroupAvcMceGetInterMotionVectorCountINTEL = 5744,
    SubgroupAvcMceGetInterReferenceIdsINTEL = 5745,
    SubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746,
    SubgroupAvcImeInitializeINTEL = 5747,
    SubgroupAvcImeSetSingleReferenceINTEL = 5748,
    SubgroupAvcImeSetDualReferenceINTEL = 5749,
    SubgroupAvcImeRefWindowSizeINTEL = 5750,
    SubgroupAvcImeAdjustRefOffsetINTEL = 5751,
    SubgroupAvcImeConvertToMcePayloadINTEL = 5752,
    SubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753,
    SubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754,
    SubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755,
    SubgroupAvcImeSetWeightedSadINTEL = 5756,
    SubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757,
    SubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758,
    SubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759,
    SubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760,
    SubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761,
    SubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762,
    SubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763,
    SubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764,
    SubgroupAvcImeConvertToMceResultINTEL = 5765,
    SubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766,
    SubgroupAvcImeGetDualReferenceStreaminINTEL = 5767,
    SubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768,
    SubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769,
    SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770,
    SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771,
    SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772,
    SubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773,
    SubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774,
    SubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775,
    SubgroupAvcImeGetBorderReachedINTEL = 5776,
    SubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777,
    SubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778,
    SubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779,
    SubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780,
    SubgroupAvcFmeInitializeINTEL = 5781,
    SubgroupAvcBmeInitializeINTEL = 5782,
    SubgroupAvcRefConvertToMcePayloadINTEL = 5783,
    SubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784,
    SubgroupAvcRefSetBilinearFilterEnableINTEL = 5785,
    SubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786,
    SubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787,
    SubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788,
    SubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789,
    SubgroupAvcRefConvertToMceResultINTEL = 5790,
    SubgroupAvcSicInitializeINTEL = 5791,
    SubgroupAvcSicConfigureSkcINTEL = 5792,
    SubgroupAvcSicConfigureIpeLumaINTEL = 5793,
    SubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794,
    SubgroupAvcSicGetMotionVectorMaskINTEL = 5795,
    SubgroupAvcSicConvertToMcePayloadINTEL = 5796,
    SubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797,
    SubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798,
    SubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799,
    SubgroupAvcSicSetBilinearFilterEnableINTEL = 5800,
    SubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801,
    SubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802,
    SubgroupAvcSicEvaluateIpeINTEL = 5803,
    SubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804,
    SubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805,
    SubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806,
    SubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807,
    SubgroupAvcSicConvertToMceResultINTEL = 5808,
    SubgroupAvcSicGetIpeLumaShapeINTEL = 5809,
    SubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810,
    SubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811,
    SubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812,
    SubgroupAvcSicGetIpeChromaModeINTEL = 5813,
    SubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814,
    SubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815,
    SubgroupAvcSicGetInterRawSadsINTEL = 5816,
    VariableLengthArrayINTEL = 5818,
    SaveMemoryINTEL = 5819,
    RestoreMemoryINTEL = 5820,
    ArbitraryFloatSinCosPiINTEL = 5840,
    ArbitraryFloatCastINTEL = 5841,
    ArbitraryFloatCastFromIntINTEL = 5842,
    ArbitraryFloatCastToIntINTEL = 5843,
    ArbitraryFloatAddINTEL = 5846,
    ArbitraryFloatSubINTEL = 5847,
    ArbitraryFloatMulINTEL = 5848,
    ArbitraryFloatDivINTEL = 5849,
    ArbitraryFloatGTINTEL = 5850,
    ArbitraryFloatGEINTEL = 5851,
    ArbitraryFloatLTINTEL = 5852,
    ArbitraryFloatLEINTEL = 5853,
    ArbitraryFloatEQINTEL = 5854,
    ArbitraryFloatRecipINTEL = 5855,
    ArbitraryFloatRSqrtINTEL = 5856,
    ArbitraryFloatCbrtINTEL = 5857,
    ArbitraryFloatHypotINTEL = 5858,
    ArbitraryFloatSqrtINTEL = 5859,
    ArbitraryFloatLogINTEL = 5860,
    ArbitraryFloatLog2INTEL = 5861,
    ArbitraryFloatLog10INTEL = 5862,
    ArbitraryFloatLog1pINTEL = 5863,
    ArbitraryFloatExpINTEL = 5864,
    ArbitraryFloatExp2INTEL = 5865,
    ArbitraryFloatExp10INTEL = 5866,
    ArbitraryFloatExpm1INTEL = 5867,
    ArbitraryFloatSinINTEL = 5868,
    ArbitraryFloatCosINTEL = 5869,
    ArbitraryFloatSinCosINTEL = 5870,
    ArbitraryFloatSinPiINTEL = 5871,
    ArbitraryFloatCosPiINTEL = 5872,
    ArbitraryFloatASinINTEL = 5873,
    ArbitraryFloatASinPiINTEL = 5874,
    ArbitraryFloatACosINTEL = 5875,
    ArbitraryFloatACosPiINTEL = 5876,
    ArbitraryFloatATanINTEL = 5877,
    ArbitraryFloatATanPiINTEL = 5878,
    ArbitraryFloatATan2INTEL = 5879,
    ArbitraryFloatPowINTEL = 5880,
    ArbitraryFloatPowRINTEL = 5881,
    ArbitraryFloatPowNINTEL = 5882,
    LoopControlINTEL = 5887,
    AliasDomainDeclINTEL = 5911,
    AliasScopeDeclINTEL = 5912,
    AliasScopeListDeclINTEL = 5913,
    FixedSqrtINTEL = 5923,
    FixedRecipINTEL = 5924,
    FixedRsqrtINTEL = 5925,
    FixedSinINTEL = 5926,
    FixedCosINTEL = 5927,
    FixedSinCosINTEL = 5928,
    FixedSinPiINTEL = 5929,
    FixedCosPiINTEL = 5930,
    FixedSinCosPiINTEL = 5931,
    FixedLogINTEL = 5932,
    FixedExpINTEL = 5933,
    PtrCastToCrossWorkgroupINTEL = 5934,
    CrossWorkgroupCastToPtrINTEL = 5938,
    ReadPipeBlockingINTEL = 5946,
    WritePipeBlockingINTEL = 5947,
    FPGARegINTEL = 5949,
    RayQueryGetRayTMinKHR = 6016,
    RayQueryGetRayFlagsKHR = 6017,
    RayQueryGetIntersectionTKHR = 6018,
    RayQueryGetIntersectionInstanceCustomIndexKHR = 6019,
    RayQueryGetIntersectionInstanceIdKHR = 6020,
    RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = 6021,
    RayQueryGetIntersectionGeometryIndexKHR = 6022,
    RayQueryGetIntersectionPrimitiveIndexKHR = 6023,
    RayQueryGetIntersectionBarycentricsKHR = 6024,
    RayQueryGetIntersectionFrontFaceKHR = 6025,
    RayQueryGetIntersectionCandidateAABBOpaqueKHR = 6026,
    RayQueryGetIntersectionObjectRayDirectionKHR = 6027,
    RayQueryGetIntersectionObjectRayOriginKHR = 6028,
    RayQueryGetWorldRayDirectionKHR = 6029,
    RayQueryGetWorldRayOriginKHR = 6030,
    RayQueryGetIntersectionObjectToWorldKHR = 6031,
    RayQueryGetIntersectionWorldToObjectKHR = 6032,
    AtomicFAddEXT = 6035,
    TypeBufferSurfaceINTEL = 6086,
    TypeStructContinuedINTEL = 6090,
    ConstantCompositeContinuedINTEL = 6091,
    SpecConstantCompositeContinuedINTEL = 6092,
    ControlBarrierArriveINTEL = 6142,
    ControlBarrierWaitINTEL = 6143,
    GroupIMulKHR = 6401,
    GroupFMulKHR = 6402,
    GroupBitwiseAndKHR = 6403,
    GroupBitwiseOrKHR = 6404,
    GroupBitwiseXorKHR = 6405,
    GroupLogicalAndKHR = 6406,
    GroupLogicalOrKHR = 6407,
    GroupLogicalXorKHR = 6408,
};

///Loads the word into the 32 bit value, correcting for endianness when necessary
///value_endian is dynamic as some spirv binaries can have swapped endianness
///Enums and packed structs defined in this struct are always specified in native endianness
pub fn loadWord(
    comptime T: type,
    value_endian: std.builtin.Endian,
    value: WordInt,
) T {
    const native_endianness = @import("builtin").cpu.arch.endian();

    if (value_endian == native_endianness) {
        return castWord(T, value);
    }

    return castWord(T, std.mem.readIntForeign(WordInt, std.mem.asBytes(&value)));
}

fn castWord(comptime T: type, value: WordInt) T {
    return switch (@typeInfo(T)) {
        .Struct => @bitCast(value),
        .Enum => @enumFromInt(value),
        else => comptime unreachable,
    };
}

///Convient representation of an operation
///This should be thought of as a "fat" IR for spirv
///Not all are ops supported yet
pub const OpInstruction = union(enum) {
    entry_point: struct {
        name: []const u8,
    },
    execution_mode: void,
    execution_mode_id: void,
    decorate: struct {
        id: WordInt,
        decoration: Decoration,
        value: WordInt,
    },
    constant: struct {
        type_id: WordInt,
        storage_class: StorageClass,
    },
};

pub const magic_number: u32 = 119734787;
pub const version: u32 = 67072;
pub const revision: u32 = 1;

test {
    @import("std").testing.refAllDecls(@This());

    _ = ImageOperands{};
    _ = FPFastMathMode{};
    _ = LoopControl{};
    _ = FunctionControl{};
    _ = MemorySemantics{};
    _ = RayFlags{};
}

const std = @import("std");
